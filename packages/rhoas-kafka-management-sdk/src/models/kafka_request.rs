/*
 * Kafka Service Fleet Manager
 *
 * Kafka Service Fleet Manager is a Rest API to manage Kafka instances.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct KafkaRequest {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// Values: [accepted, preparing, provisioning, ready, failed, deprovision, deleting] 
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Name of Cloud used to deploy. For example AWS
    #[serde(rename = "cloud_provider", skip_serializing_if = "Option::is_none")]
    pub cloud_provider: Option<String>,
    #[serde(rename = "multi_az")]
    pub multi_az: bool,
    /// Values will be regions of specific cloud provider. For example: us-east-1 for AWS
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "bootstrap_server_host", skip_serializing_if = "Option::is_none")]
    pub bootstrap_server_host: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "failed_reason", skip_serializing_if = "Option::is_none")]
    pub failed_reason: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "instance_type", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    #[serde(rename = "reauthentication_enabled")]
    pub reauthentication_enabled: bool,
    #[serde(rename = "kafka_storage_size", skip_serializing_if = "Option::is_none")]
    pub kafka_storage_size: Option<String>,
}

impl KafkaRequest {
    pub fn new(multi_az: bool, reauthentication_enabled: bool) -> KafkaRequest {
        KafkaRequest {
            id: None,
            kind: None,
            href: None,
            status: None,
            cloud_provider: None,
            multi_az,
            region: None,
            owner: None,
            name: None,
            bootstrap_server_host: None,
            created_at: None,
            updated_at: None,
            failed_reason: None,
            version: None,
            instance_type: None,
            reauthentication_enabled,
            kafka_storage_size: None,
        }
    }
}


