/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ConsumerGroup : A group of Kafka consumers



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConsumerGroup {
    /// Unique identifier for the consumer group
    #[serde(rename = "groupId")]
    pub group_id: String,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The list of consumers associated with this consumer group
    #[serde(rename = "consumers")]
    pub consumers: Vec<crate::models::Consumer>,
}

impl ConsumerGroup {
    /// A group of Kafka consumers
    pub fn new(group_id: String, consumers: Vec<crate::models::Consumer>) -> ConsumerGroup {
        ConsumerGroup {
            group_id,
            state: None,
            consumers,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "STABLE")]
    STABLE,
    #[serde(rename = "DEAD")]
    DEAD,
    #[serde(rename = "EMPTY")]
    EMPTY,
    #[serde(rename = "COMPLETING_REBALANCE")]
    COMPLETINGREBALANCE,
    #[serde(rename = "PREPARING_REBALANCE")]
    PREPARINGREBALANCE,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,
}

impl Default for State {
    fn default() -> State {
        Self::STABLE
    }
}

